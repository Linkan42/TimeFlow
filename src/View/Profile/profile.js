import { React, Component, useState } from "react";
import { Grid, TextField, Button, IconButton, InputAdornment } from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import axios from "axios";

import "../Profile/profile.css";

// token is generated by server when the user logs in
const token = "mytoken";

/*
// Retrieve the token from localStorage
const storedToken = localStorage.getItem("token");

if (storedToken) {
  // Token exists in localStorage, you can use it for API requests or other purposes
  console.log("Token found:", storedToken);
} else {
  // Token doesn't exist in localStorage, handle this situation according to your application logic
  console.log("Token not found.");
*/

const UserForm = () => {
	const [newName, setNewName] = useState("");
	const handleNameChange = (event) => {
		setNewName(event.target.value);
	};

	const [newEmail, setNewEmail] = useState("");
	const handleEmailChange = (event) => {
		setNewEmail(event.target.value);
	};

	const [password, setPassword] = useState("");
	const [passwordsMatch, setPasswordsMatch] = useState(true);
	const handlePasswordChange = (event) => {
		setPassword(event.target.value);
	};
	const handleConfirmPasswordChange = (event) => {
		setPasswordsMatch(event.target.value === password);
	};

	const [showCurrPassword, setShowCurrPassword] = useState(false);
	const handleToggleCurrPasswordVisibility = () => {
		setShowCurrPassword(!showCurrPassword);
	};
	const [showNewPassword, setShowNewPassword] = useState(false);
	const handleToggleNewPasswordVisibility = () => {
		setShowNewPassword(!showNewPassword);
	};

	const handleSaveButton = async () => {
		try {
			// Handle success, update UI or show a success message
			// Send the user's unique token to the server, to know which
			// user to update
			
			const responseName = await axios.post("/updateName", { newName } , {
				headers: {
					Authorization: `Bearer ${token}`
				}}
			);
			console.log("Name updated:", responseName.data.user);

			const responseEmail = await axios.post("/updateEmail", { newEmail } , {
				headers: {
					Authorization: `Bearer ${token}`
				}}
			);
			console.log("Email updated:", responseEmail.data.user);
		} catch (error) {
			// Handle error, show an error message to the user
			console.error("Error updating user:", error);
		}
	};

	return (
		<>
			<Grid Container className='container'>
				<Grid item xs={12}>
					<TextField
						margin="normal"
						id="name"
						label="Username"
						type="text"
						fullWidth
						onChange={handleNameChange}
					/>
				</Grid>
				<Grid item xs={12}>
					<TextField
						margin="normal"
						id="email"
						label="E-mail"
						type="email"
						fullWidth
						onChange={handleEmailChange}
					/>
				</Grid>
				<Grid item xs={12}>
					<TextField
						margin="normal"
						id="cur_password"
						label="Current password"
						type={showCurrPassword ? "text" : "password"}
						fullWidth
						InputProps={{
							endAdornment: (
								<InputAdornment position="end">
									<IconButton onClick={handleToggleCurrPasswordVisibility}>
										{showCurrPassword ? <VisibilityOff /> : <Visibility />}
									</IconButton>
								</InputAdornment>
							),
						}}
					/>
				</Grid>
				<Grid item xs={12}>
					<TextField
						margin="normal"
						id="new_password"
						label="Enter new password"
						type={showNewPassword ? "text" : "password"}
						fullWidth
						onChange={handlePasswordChange}
						InputProps={{
							endAdornment: (
								<InputAdornment position="end">
									<IconButton onClick={handleToggleNewPasswordVisibility}>
										{showNewPassword ? <VisibilityOff /> : <Visibility />}
									</IconButton>
								</InputAdornment>
							),
						}}
					/>
				</Grid>
				<Grid item xs={12}>
					<TextField 
						margin="normal"
						id="re_new_password"
						label="Re-type password"
						type={showNewPassword ? "text" : "password"}
						fullWidth
						error={!passwordsMatch}
						helperText={!passwordsMatch ? "Passwords do not match!" : ""}
						onChange={handleConfirmPasswordChange}
						InputProps={{
							endAdornment: (
								<InputAdornment position="end">
									<IconButton onClick={handleToggleNewPasswordVisibility}>
										{showNewPassword ? <VisibilityOff /> : <Visibility />}
									</IconButton>
								</InputAdornment>
							),
						}}
					/>
				</Grid>
				<Grid item xs={12}>
					<Button className="save_button" onClick={handleSaveButton}>
							Save changes
					</Button>
				</Grid>
			</Grid>
		</>
	);
};


export class Profile extends Component {
	render(){
		return(
			<UserForm/>
		);
	}
}

export default UserForm;